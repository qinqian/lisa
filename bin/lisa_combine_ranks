#!/usr/bin/env python
import pandas as pd
import numpy as np
import os
import scipy.stats as stats
import argparse
import copy

def deduplicate(df):
    out = copy.deepcopy(df)
    #do not deduplicate, since row names is not consistent for cistromedb and imputed TFBS
    print(df.head())
    out.loc[:, 'TF'] = df.index.map(lambda x: x.split('|')[1]) 
    ##out.loc[:, 'TF'] = df.index.map(lambda x: x.split('_')[0])
    out = out.drop_duplicates('TF', inplace=False)
    print(out.head())
    return out

def cauchy_p_value(p_vals, wi=None):
    """https://arxiv.org/abs/1808.09011"""
    p_vals = np.array(p_vals, np.float64)
    if np.any(p_vals <= 1e-15): # np.finfo(np.float64) 1e-15
        from mpmath import mp
        mp.dps = 200
        mp.pretty = True
        p_vals = [mp.mpf(i) for i in p_vals]
        t0 = sum([mp.tan((mp.mpf(0.5)-i)*mp.pi())/mp.mpf(3) for i in p_vals])
        p =  mp.mpf(0.5)-mp.atan(t0)/mp.pi()
        return t0, p
    else:
        if wi is None:
            wi = 1.0 / len(p_vals)
        stat = np.sum(wi * np.tan((0.5-p_vals) * np.pi))
        return stat, 0.5 - np.arctan(stat)/np.pi

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('rankcsv', nargs='+', help='a list of TF rank csv files')
    parser.add_argument('-tf', required=False, default='', type=str, help='target tf name')
    parser.add_argument('-prefix', required=True,  type=str, help='output prefix')
    args = parser.parse_args()
    
    individual_ranks = []
    rank = pd.read_csv(args.rankcsv[0], index_col=0, header=0)
    rank_dedup = deduplicate(rank)
   
    if len(args.rankcsv) == 1:
        rank.to_csv('%s_cauchy_combine_raw.csv' % args.prefix)
        rank_dedup.to_csv('%s_cauchy_combine_dedup.csv' % args.prefix)

        rank.to_csv('%s_fisher_combine_raw.csv' % args.prefix)
        rank_dedup.to_csv('%s_fisher_combine_dedup.csv' % args.prefix)
        return True
    else:
        rank_dedup.to_csv('%s_dedup.csv' % args.rankcsv[0].replace('.csv', ''))
        rank_dedup.index = rank_dedup.TF
        rank_dedup.drop('TF', axis=1)

    for r in args.rankcsv[1:]:
        rank2 = pd.read_csv(r, index_col=0, header=0)
        rank_dedup2 = deduplicate(rank2)
        rank_dedup2.to_csv('%s_dedup.csv' % r.replace('.csv', ''))
        rank_dedup2.index = rank_dedup2.TF
        rank_dedup2.drop('TF', axis=1)
        rank = rank.merge(rank2, left_index=True, right_index=True)

    for i in rank.columns:
        print(i)
    if 'qc' in rank.columns or 'qc_x' in rank.columns:  # chip-seq 
        rank_meta = rank.iloc[:, -7:]
    else: # motif
        rank_meta = rank.iloc[:, -28:]
    rank = rank.loc[:, rank.columns.str.startswith('pval')]
    # cauchy combination test 
    combine_p = rank.apply(lambda x: cauchy_p_value(x)[1], axis=1)
    #print(combine_p.head())
    combine_p = pd.DataFrame(combine_p)
    combine_p = pd.concat([combine_p, rank_meta], axis=1)

    combine_p.columns = ['pval'] + list(map(lambda x: x.replace('_y', ''), rank_meta.columns))
    combine_p.sort_values(['pval'], inplace=True)
    combine_p.to_csv('%s_cauchy_combine_raw.csv' % args.prefix)
    combine_p = deduplicate(combine_p)
    combine_p.to_csv('%s_cauchy_combine_dedup.csv' % args.prefix)

    combine_p2 = rank.apply(lambda x: stats.combine_pvalues(x, method='fisher')[1], axis=1)
    combine_p2.sort_values(inplace=True)
    combine_p2 = pd.DataFrame(combine_p2)
    combine_p2.to_csv('%s_fisher_combine_raw.csv' % args.prefix)
    combine_p2 = deduplicate(combine_p2)
    combine_p2.to_csv('%s_fisher_combine_dedup.csv' % args.prefix)

if __name__ == '__main__':
    main()
