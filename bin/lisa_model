#!/usr/bin/env python

"""build models for one epigenome type and one gene list
from gene regulatory potential
"""
import fire
from lisa.data import EpigenomeData
from lisa.utils import binarize_gene_set
from lisa.model import Logit
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import make_scorer, roc_auc_score, average_precision_score, roc_curve, r2_score
import json
import pandas as pd
import numpy as np
import h5py


def model(sample_number, species, epigenome, gene_set, foreground, background, prefix, new_h5, covariates, only_newhdf5):
    """
    species: species for epigenome and gene_set
    epigenome: one epigenome type, e.g. DNase
    gene_set: a gene set file, one gene per line
    """
    epigenome = EpigenomeData(species, epigenome)
    feature = epigenome.get_RP

    refseq = feature.index.map(lambda x: x.split(':')[-2].upper())
    symbol = feature.index.map(lambda x: x.split(':')[-1].upper())

    # add new hdf5 rp feature
    if new_h5 != None:
        with h5py.File(new_h5, mode='r') as st:
            eids = list(map(lambda x: x.decode('utf-8'), st["IDs"][...]))
            df = pd.DataFrame(st["RP"][...], index=feature.index,
                              columns=eids)
            if only_newhdf5:
                feature = df
            else:
                feature = pd.concat([feature, df], axis=1)

    # add GC covariates
    if covariates:
        feature = pd.concat([feature, epigenome.get_covariates_reg], axis=1)

    # align Y with X by refseq/symbol
    gene_vec = binarize_gene_set(gene_set, refseq, symbol)
    feature.loc[:, 'Y'] = gene_vec
    feature.loc[:, 'symbols'] = symbol

    feature_symbols = feature.drop_duplicates(subset='symbols', keep='first', inplace=False)
    feature_symbols = feature_symbols.drop('symbols', axis=1, inplace=False)

    fore_genes = np.genfromtxt(foreground, dtype='str')
    back_genes = np.genfromtxt(background, dtype='str')
    feature_symbols = pd.concat([feature_symbols.loc[fore_genes],
                                 feature_symbols.loc[back_genes]],
                                axis=0)

    feature_symbols_x = feature_symbols.iloc[:, :(feature_symbols.shape[1]-1)]
    feature_symbols_y = feature_symbols.Y

    feature_symbols_x = np.log2(feature_symbols_x+1)
    # feature_symbols_x = feature_symbols_x.where(feature_symbols_x > 0, -1)
    scale = StandardScaler(with_std=False)

    # scale = RobustScaler(quantile_range=(5, 95))
    feature_symbols_x = pd.DataFrame(scale.fit_transform(feature_symbols_x),
                                     columns=feature_symbols_x.columns,
                                     index=feature_symbols_x.index)

    logit = Logit(feature_symbols_x, feature_symbols_y, covariates=covariates)
    auc, prauc, coefs = logit.train(sample_number)

    coefs = coefs.join(epigenome.get_sample_annotation(coefs.index))
    coefs.to_csv("%s.coefs.csv" % prefix)

    Y = feature.Y
    feature = feature.iloc[:, :(feature.shape[1]-2)]
    feature = np.log2(feature+1)

    # feature = feature.where(feature > 0, -1)
    # feature = np.sqrt(feature)

    feature = pd.DataFrame(scale.fit_transform(feature),
                           columns=feature.columns,
                           index=feature.index)

    feature_sub = feature.loc[:, coefs.index]

    lisa_predicted_rp = np.dot(feature_sub.values,
                               coefs.iloc[:, 0].values)
    lisa_predicted_rp = pd.DataFrame(lisa_predicted_rp, index=feature.index,
                                     columns=[epigenome.epigenome])
    lisa_predicted_rp.to_csv("%s.lisa_predicted_rp.csv" % prefix)

    ## write out the selected mark regulatory potential
    ## for i in range(feature_sub.shape[1]):
    ##     feature_sub.iloc[:, i].to_csv("%s.%s.csv" % (prefix, feature_sub.columns[i]))

    # plt.plot(fpr, tpr, color='blue', label="ROC AUC %s" % auc)
    # plt.title(name + " TF binding prediction \n from differential expression logistic regression ")
    # plt.xlabel('False positive rate')
    # plt.ylabel('True positive rate')
    # plt.legend(fontsize=12, loc=3, bbox_to_anchor=(0., 0.88, 1., .102), ncol=2, mode='expand',borderaxespad=0.)

    ## auc curve and performance
    fpr, tpr, _ = roc_curve(Y, lisa_predicted_rp, pos_label=1)
    d3json = {"performance": auc,  "performance2": prauc, 
              "tpr": list(tpr), "fpr": list(fpr)}

    with open("%s.roc_curve.json" % prefix, "w") as out_js:
        json.dump(d3json, out_js, sort_keys=True, indent=4)

    with open("%s.gene_set.performance" % prefix, 'w') as fin:
        fin.write("%s\t%s\n" % (auc, prauc))

if __name__ == '__main__':
    fire.Fire(model)
