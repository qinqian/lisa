import os
import glob
from pkg_resources import resource_filename
import json
configfile: "$config"

if config['fastqs'] != None:
    path = os.path.abspath(config['fastqs'][0])
    config['input_root'] = os.path.dirname(path)
    include: resource_filename('lisa.rules', 'fastq.rule')

if config['bigwigs'] != None:
    include: resource_filename('lisa.rules', 'hdf5.rule')

if config['model']:
    include: resource_filename('lisa.rules', 'background_selection.rule')

    if config['method'] != 'beta':
        include: resource_filename('lisa.rules', 'model.rule')

    if not config['web']:
        include: resource_filename('lisa.rules', 'baseline.rule')

    if config['method'] == 'all' or config['method'] == 'beta':
        include: resource_filename('lisa.rules', 'lisa_direct.rule')

    if config['method']== 'all' or config['method'] == 'knockout':
        include: resource_filename('lisa.rules', 'knockout.rule')
        include: resource_filename('lisa.rules', 'combine_motif.rule')

    include: resource_filename('lisa.rules', 'combine_chipseq.rule')

    if config['cluster']:
        if not config['web']:
            include: resource_filename('lisa.rules', 'entropy.rule')

def get_targets():
    targets = []
    if config['model']:
        if config['method'] != 'beta':
            targets = expand("{sample}.{epigenome}.coefs.csv", sample=config["gene_sets"], epigenome=config["epigenome"]) + expand("{sample}.{epigenome}.lisa_predicted_rp.csv", sample=config["gene_sets"], epigenome=config["epigenome"])
        if not config['web']:
            targets += expand("{sample}_motif99_baseline.csv", sample=config["gene_sets"])
            targets += expand("{sample}_chipseq_baseline.csv", sample=config["gene_sets"])

        if config['method'] == 'all' or config['method'] == 'beta':
            if not config['web']:
                targets += expand("{sample}.1000.lisa_direct.csv", sample=config["gene_sets"])
            targets += expand("{sample}.3000.lisa_direct.csv", sample=config["gene_sets"])

        if config['method'] == 'all' or config['method'] == 'knockout':
            targets += expand("{sample}.{epigenome}.motif99.csv", sample=config["gene_sets"], epigenome=config["epigenome"])
            targets += expand("{sample}.{epigenome}.chipseq.csv", sample=config["gene_sets"], epigenome=config["epigenome"])
            # motif combined ranks
            targets += expand("{sample}_motif_cauchy_combine_dedup.csv", sample=config["gene_sets"])

        # ChIP-seq combined ranks
        targets += expand("{sample}_chipseq_cauchy_combine_dedup.csv", sample=config["gene_sets"])
        if config['cluster']:
            if not config['web']:
                targets += expand("{sample}.{epigenome}.chipseq.entropy_rank.csv", sample=config["gene_sets"], epigenome=config["epigenome"])
                targets += expand("{sample}.{epigenome}.motif99.entropy_rank.csv", sample=config["gene_sets"], epigenome=config["epigenome"])
    else:
        targets += []

    if config['fastqs'] != None:
        ## assume file as id.fastq.gz
        ids = list(map(os.path.basename, config['fastqs']))
        targets += \
                   expand('%s/%s/{sample}.bigwig' % (config['prefix'], config['epigenome']),
                          sample=ids) + \
                   expand('%s/%s/{sample}.bam' % (config['prefix'], config['epigenome']),
                          sample=ids)

    if config['bigwigs'] != None:
        targets += \
                   expand('{sample}.%s.%s.1kb_read_count.h5' % (config['prefix'], config['epigenome']),
                          sample=config['bigwigs']) + \
                    expand('{sample}.%s.%s.reg_potential.h5' % (config['prefix'], config['epigenome']),
                           sample=config['bigwigs']) + \
                   ['%s.%s.reg.h5' % (config['prefix'], config['epigenome'])] + \
                   ["%s.%s.readcount.h5" % (config['prefix'], config['epigenome'])]

        print(targets)
    return targets

rule all:
    input:
        get_targets()

rule clean:
    params:
        prefix = config['prefix']
    run: 
        for g in config["gene_sets"]:
            print(g)
            for f in glob.glob('%s*' % g):
                if g == f or 'p_val' in f or 'dedup' in f or 'coefs' in f or 'cauchy_combine_raw' in f:
                    print('preserve %s' % f)
                    continue
                print('clean up %s' % f)
                os.remove(f)
